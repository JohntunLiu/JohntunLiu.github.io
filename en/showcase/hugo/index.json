[{"content":" 本文主要描述个人如何使用GitHub Actions生成静态网站自动发布到阿里OSS上并绑定个人域名访问的，分享一下踩坑经验，希望能对你有所帮助。\n OSS中创建Bucket 这里注意如果域名没备案的话，可以选择境外地域的结点，下图以新加坡为例：\n修改OSS写读权限 获取AccessKey 使用的是阿里推荐的子用户**AccessKey，**可以配置权限\nGitHub填入Accesskey ID和Secret GitHub Actions编写 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  name:deploy blogon:push:schedule:- cron:\u0026#39;30 20 * * *\u0026#39;jobs:build:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v2with:submodules:\u0026#39;recursive\u0026#39;- uses:srt32/git-actions@v0.0.3with:args:git submodule update --init --recursive- name:use Node.js 10.xuses:actions/setup-node@v1with:node-version:10.x- name:npm i Hugouses:peaceiris/actions-hugo@v2- name:Buildrun:|hugo --minify #hugo --minify到ubuntu-latest是部署Hugo的，不用可以去掉- name:setup aliyun ossuses:manyuanrong/setup-ossutil@masterwith:endpoint:oss-ap-southeast-1.aliyuncs.com#修改为自己的Endpointaccess-key-id:${{ secrets.OSS_KEY_ID }}access-key-secret:${{ secrets.OSS_KEY_SECRET }}- name:cp aliyun ossrun:ossutil cp -rf public oss://zongtang/#修改为自己的  注意代码中的注释内容\n运行效果 解析域名 我是用的腾讯提供的域名服务，因为记录值不是IP地址，所以记录类型就选CNAME，记录值就填OSS概述中的域名，第一张图里标示了\n测试访问 欢迎去我博客或微信公众号LiuJohntun看整个建站流程，目前已经简化操作直接在Forestry.io上编写markdown文章后预览无误后提交通过GitHub Actions自动部署到GitHubPages、 GiteePages、OSS对象存储\n如若内容有不足之处，还望大家多提建议多多与我交流。\n更多精彩可以关注我的博客或微信公众号LiuJohntun，记录并分享我的所见、所学、所想\u0026hellip;\n","description":"","id":2,"section":"posts","tags":["博客优化"],"title":"Github Actions自动部署Hugo到阿里OSS","uri":"/en/posts/github-actions-hugo-oss/"},{"content":" 我的博客使用GitHub上的pages功能发布的基于Hugo生成的静态网站，基本无法正常访问，所以想要同步一份到gitee上发布，现在使用GitHub Actions提供的计算机资源就可以直接在GitHub上进行静态网站的生成，发布，远程刷新gitee pages，触发条件可以是push或者定时等等，可谓十分好用，之后看到可以直接同步到gitee仓库，就实现一下试试，以下就是实现步骤，以及踩坑，当然强烈建议看开源代码的官方说明文档。\n 生成公钥和私钥并填入仓库 输入ssh-keygen -t rsa -C \u0026quot;user@email.com\u0026quot;，然后回车几次，会生成 id_rsa.pub 文件和 id_rsa 文件，分别存放公钥和私钥：\nGitee仓库填入公钥 将公钥 id_rsa.pub 中的数据填入到gitee待备份仓库界面下 settings→Deploy keys→add personal public key\n**这里注意:**要选右上添加personal public key才有写入权限\nGitHub仓库填入私钥 Settings→Secret→New repository secre 用于之后的程序环境配置访问，命名为GITEE_RSA_PRIVATE_KEY\n生成GitHub账号的 personal access token 将仓库权限选上就行了，然后将生成的token，配到私钥配置的地方 仓库→Settings→Secret→New repository secre，命名为ACCESS_TOKEN\n在仓库secret处添加GITEE_PASSWORD，放入gitee账号密码用于刷新gitee pages 同之前步骤相同，之后用于环境变量的配置，就是以下3条secret，OSS的是自动部署到阿里OSS的脚本使用的，我是放在一个脚本里运行，需要了解可以看我另一篇文章。\n在GitHub仓库创建并编写Actions脚本！！！ 文件名随意从这点开就行，下面有模板，点开后修改也行，创建的文件默认放在.github/workflows/下\n也可以用命令创建mkdir -p .github/workflows \u0026amp;\u0026amp; touch .github/workflows/name.yml\n将代码拷入，修改具体变量，比如仓库名等，如果不需要deploy直接去掉就行了，不影响： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69  name:deploy blog to giteeon:push:branches:- main # master 分支 push 的时候触发jobs:deploy:#执行部署Hugo生成静态代码，默认放在gh-pages分支runs-on:ubuntu-18.04steps:- uses:actions/checkout@v2with:submodules:recursive # Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.81.0\u0026#39;extended:true#不需要extended版本就可以注释- name:Buildrun:hugo --minify- name:Deploypageuses:peaceiris/actions-gh-pages@v3with:personal_token:${{ secrets.ACCESS_TOKEN }}external_repository:JohntunLiu/JohntunLiu.github.iopublish_branch: gh-pages # default:gh-pagespublish_dir:./public- name:Deploygiteeuses:peaceiris/actions-gh-pages@v3with:personal_token:${{ secrets.ACCESS_TOKEN }}publish_dir:./publicsync:#同步到gitee仓库needs:deployruns-on:ubuntu-lateststeps:- name:Sync to Giteeuses:wearerequired/git-mirror-action@masterenv:SSH_PRIVATE_KEY:${{ secrets.GITEE_RSA_PRIVATE_KEY }}with:# 来源仓库source-repo:\u0026#34;git@github.com:JohntunLiu/myblog.git\u0026#34;# 目标仓库destination-repo:\u0026#34;git@gitee.com:JohntunLiu/JohntunLiu.git\u0026#34;reload-pages:needs:syncruns-on:ubuntu-lateststeps:- name:Build Gitee Pagesuses:yanglbme/gitee-pages-action@mainwith:# 注意替换为你的 Gitee 用户名gitee-username:JohntunLiu# 注意在 Settings-\u0026gt;Secrets 配置 GITEE_PASSWORDgitee-password:${{ secrets.GITEE_PASSWORD }}# 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错gitee-repo:JohntunLiu/JohntunLiu# 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）branch:gh-pages  点击commit changes 提交运行，之后就看得到运行流程了\n实际效果和流程 如果是部署其他静态网站，修改deploy的代码块就行了，我顺便把部署到GitHub pages放在了里面：name: Deploypage\n如果是hugo的话开源人员还提供了缓存机制，可以提高部署速度，可以去开源部分看，具体怎么看就是复制- uses: peaceiris/actions-hugo@v2 后面的部分搜索到GitHub中看，比如：https://github.com/peaceiris/actions-hugo，readme.md文档写得相当详实，也会更新说明\n欢迎去我博客或微信公众号LiuJohntun看整个建站流程，目前已经简化操作直接在Forestry.io上编写markdown文章后预览无误后提交通过GitHub Actions自动部署到GitHubPages、 GiteePages、OSS对象存储\n如若内容有不足之处，还望大家多提建议多多与我交流。\n更多精彩可以关注我的博客或微信公众号LiuJohntun，记录并分享我的所见、所学、所想\u0026hellip;\n","description":"","id":3,"section":"posts","tags":["博客优化"],"title":"Github Actions自动部署Hugo到Gitee同时刷新Gitee Pages","uri":"/en/posts/%E9%80%9A%E8%BF%87githubactions%E5%B0%86%E4%BB%93%E5%BA%93%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E5%88%B0gitee/"},{"content":"从设置首页打开语言栏，也可以直接搜索，再点击语言中的 选项 点击微软拼音的 选项 选择 词库和自学 选中 添加和编辑自定义短语 添加 编辑短语，可以调整在输入法中的位置 使用输入法时就可以使用该快捷短语了 完成常用代码的快速输入 如若内容有不足之处，还望大家多提建议多多与我交流。\n更多精彩可以关注我的博客或微信公众号LiuJohntun，记录并分享我的所见、所学、所想\u0026hellip;\n","description":"","id":4,"section":"posts","tags":["实用技巧"],"title":"Win10输入法自定义短语设置 提升个人效率","uri":"/en/posts/win10%E8%BE%93%E5%85%A5%E6%B3%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9F%AD%E8%AF%AD%E8%AE%BE%E7%BD%AE-%E6%8F%90%E5%8D%87%E4%B8%AA%E4%BA%BA%E6%95%88%E7%8E%87/"},{"content":" When allowCredentials is true, allowedOrigins cannot contain the special value \u0026ldquo;*“since that cannot be set on the “Access-Control-Allow-Origin” response header. To allow credentials to a set of origins, list them explicitly or consider using\u0026quot;allowedOriginPatterns” instead.\n  当allowCredentials为true时，allowedOrigins不能包含特殊值“ *”，因为无法在“ Access-Control-Allow-Origin”响应标头上设置。要允许凭据为一组来源，请明确列出它们或考虑使用“ allowedOriginPatterns” 代替。\n 将跨域设置放在gateway模块中:\n解决办法：跨域配置报错，将.allowedOrigins替换成.allowedOriginPatterns即可。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  /** * 配置跨域 * @return */ @Bean public CorsWebFilter corsFilter() { CorsConfiguration config = new CorsConfiguration(); config.setAllowCredentials(Boolean.TRUE); config.addAllowedMethod(\u0026#34;*\u0026#34;); config.addAllowedOriginPattern(\u0026#34;*\u0026#34;); config.addAllowedHeader(\u0026#34;*\u0026#34;); config.setMaxAge(3600L); UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(new PathPatternParser()); source.registerCorsConfiguration(\u0026#34;/**\u0026#34;, config); return new CorsWebFilter(source); }   ","description":"","id":5,"section":"posts","tags":["Springboot"],"title":"Springboot跨域配置报特殊符号错误","uri":"/en/posts/springboot-%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE%E6%8A%A5%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E9%94%99%E8%AF%AF/"},{"content":"目的是固定虚拟机CentOS7 中IP地址操作，以免重启后IP地址改变 网络信息截图如下，读取ip地址和网关等信息：\n自动分配网络内可用IP：\n1  [root@tang ~]# dhclient   固定静态IP：\n1  [root@tang ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens33    文件初始：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  TYPE=\u0026#34;Ethernet\u0026#34;PROXY_METHOD=\u0026#34;none\u0026#34;BROWSER_ONLY=\u0026#34;no\u0026#34;BOOTPROTO=\u0026#34;dhcp\u0026#34;DEFROUTE=\u0026#34;yes\u0026#34;IPV4_FAILURE_FATAL=\u0026#34;no\u0026#34;IPV6INIT=\u0026#34;yes\u0026#34;IPV6_AUTOCONF=\u0026#34;yes\u0026#34;IPV6_DEFROUTE=\u0026#34;yes\u0026#34;IPV6_FAILURE_FATAL=\u0026#34;no\u0026#34;IPV6_ADDR_GEN_MODE=\u0026#34;stable-privacy\u0026#34;NAME=\u0026#34;ens33\u0026#34;UUID=\u0026#34;d5c29673-866e-4fa4-8613-d2c11cccc16c\u0026#34;DEVICE=\u0026#34;ens33\u0026#34;ONBOOT=\u0026#34;yes\u0026#34;  文件修改后：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  TYPE=\u0026#34;Ethernet\u0026#34;PROXY_METHOD=\u0026#34;none\u0026#34;BROWSER_ONLY=\u0026#34;no\u0026#34;# 该处修改为staticBOOTPROTO=\u0026#34;static\u0026#34;DEFROUTE=\u0026#34;yes\u0026#34;IPV4_FAILURE_FATAL=\u0026#34;no\u0026#34;IPV6INIT=\u0026#34;yes\u0026#34;IPV6_AUTOCONF=\u0026#34;yes\u0026#34;IPV6_DEFROUTE=\u0026#34;yes\u0026#34;IPV6_FAILURE_FATAL=\u0026#34;no\u0026#34;IPV6_ADDR_GEN_MODE=\u0026#34;stable-privacy\u0026#34;NAME=\u0026#34;ens33\u0026#34;UUID=\u0026#34;d5c29673-866e-4fa4-8613-d2c11cccc16c\u0026#34;DEVICE=\u0026#34;ens33\u0026#34;ONBOOT=\u0026#34;yes\u0026#34;# 该处添加网络信息IPADDR=\u0026#34;192.168.12.131\u0026#34;NETMASK=\u0026#34;255.255.255.0\u0026#34;GATEWAY=\u0026#34;192.168.12.1\u0026#34;DNS1=\u0026#34;119.29.29.29\u0026#34;  重启网络：\n1  systemctl restart network.service   如若内容有不足之处，还望大家多提建议多多与我交流。\n更多精彩可以关注我的博客或微信公众号LiuJohntun，记录并分享我的所见、所学、所想\u0026hellip;\n","description":"","id":6,"section":"posts","tags":["CentOS"],"title":"固定虚拟机CentOS7中IP地址的操作","uri":"/en/posts/%E5%9B%BA%E5%AE%9Acentos7%E4%B8%ADip%E5%9C%B0%E5%9D%80%E6%93%8D%E4%BD%9C/"},{"content":"Top Ten Eleven 1504 Tips Oh, the questions you’ll ask  Questions will very often determine the quest that you take We also need to ask the positive question Questions start quest  Believe—in yourself and others  Beliefs create reality Two things distinguish the extraordinary from the rest:  One was that they were always asking question, always wanting to learn more, having that humbleness They believed in themselves    Learn to fail or fail to learn Give yourself the permission to be human Open up (journal and/or person) Cultivate the benefit finder (express gratitude) Simplify  But remember that a much better predictor of well-being than material affluence is time affluence. Say NO at times when it\u0026rsquo;s appropriate. Find out what you really , really want to do with your life and do it  Cultivate relationships Remember the mind-body connection  Exercise at least four times a week for 30 minutes Yoga or mindful meditation, breathe deeply Sleep around 8 hours a night of sleep Touch, hug and embrace  Strive to be known rather than validated Introduce behavioral change NOW 如若内容有不足之处，还望大家多提建议多多与我交流。\n更多精彩可以关注我的博客或微信公众号LiuJohntun，记录并分享我的所见、所学、所想\u0026hellip;\n","description":"","id":9,"section":"posts","tags":["课程"],"title":"Top Eleven 1504 Tips","uri":"/en/posts/top-eleven-1504-tips/"},{"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nSimple button\nbutton   You can specify width, height\nbutton   Set color\nYou can customize the button primary color in the file at root/data/button.toml. Just copy-paste the theme’s button.toml file and edit the params as you want.\nbutton  \nHow to use tab\nWindows MacOS Ubuntu  Windows section 1  console.log(\u0026#39;Hello World!\u0026#39;);     MacOS section Hello world!  Ubuntu section Great!    'use strict'; var containerId = JSON.parse(\"\\\"12abf4928132c6bd\\\"\"); var containerElem = document.getElementById(containerId); var tabLinks = null; var tabContents = null; var ids = []; if (containerElem) { tabLinks = containerElem.querySelectorAll('.tab__link'); tabContents = containerElem.querySelectorAll('.tab__content'); } for (var i = 0; i 0) { tabContents[0].style.display = 'block'; } \nHow to use notice : success, info, warning, error\nsuccess text  info text  warning text  error text  How to use image\nSample Image: Image with title, caption, alt, ...  \nHow to use expand\n  Expand me  Some Markdown Contents taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SC taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SC\ntaxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SC\ntaxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SC\n \nHow to use code java javascript  1  System.out.println(\u0026#39;Hello World!\u0026#39;);     1  console.log(\u0026#39;Hello World!\u0026#39;);       'use strict'; var containerId = JSON.parse(\"\\\"7d54f0bf9d841150\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  warning, success, info, danger this is a text this is a text this is a text this is a text Markdownify box\nSome markdown contents Simple box\nSome contents  Hugo makes use of a variety of open source projects including:\n https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","description":"Hugo, the world’s fastest framework for building websites","id":13,"section":"","tags":null,"title":"About","uri":"/en/about/"}]